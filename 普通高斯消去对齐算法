#include <iostream>
#include<arm_neon.h>
#include<sys/time.h>
#include<unistd.h>
#include <cstdlib>
using namespace std;
const int N=1000;
float m[N][N];
void m_reset()
{
        for(int i=0;i<N;i++)
        {
                for(int j=0;j<i;j++)
                        m[i][j]=0;
                m[i][i]=1.0;
                for(int j=i+1;j<N;j++)
                        m[i][j]=rand()%1000;
        }
        for(int k=0;k<N;k++)
                for(int i=k+1;i<N;i++)
                        for(int j=0;j<N;j++)
                                m[i][j]+=m[k][j];
}
void func_neon(float m[N][N])
{
        int k,j,i;
        for( k=0;k<N;k++)
        {
                float32x4_t vt=vmovq_n_f32(m[k][k]);
		j=k+1;
		while(j%4!=0)
	 	{
    			m[k][j]=m[k][j]/m[k][k];
			j++;
               	}
		for( ;j+4<=N;j+=4)
                {
		
                        float32x4_t va=vld1q_f32(&m[k][j]);
                        va=vdivq_f32(va,vt);
                        vst1q_f32(&m[k][j],va);                                                                         
                }
                for(;j<N;j++)
                {
    			m[k][j]=m[k][j]/m[k][k];
                }
                m[k][k]=1.0;
                for(i=k+1;i<N;i++)
                {
                        float32x4_t vaik=vmovq_n_f32(m[i][k]);
			j=k+1;
			while(j%4!=0)
	 		{
    			   m[i][j]=m[i][j]-m[k][j]*m[i][k];
				j++;
	             	 }

                        for(;j+4<=N;j+=4)
                        {
                                float32x4_t vakj=vld1q_f32(&m[k][j]);
                                float32x4_t vaij=vld1q_f32(&m[i][j]);
                                float32x4_t vx=vmulq_f32(vakj,vaik);
                                vaij=vsubq_f32(vaij,vx);
                                vst1q_f32(&m[i][j],vaij);                                                                                                                                                                                                               }
                        for(;j<N;j++)
                        {
                                m[i][j]=m[i][j]-m[k][j]*m[i][k];
                        }
                        m[i][k]=0;
                }
        }
}
int main()
{
        m_reset();
        struct  timeval   tv_begin,tv_end;
        unsigned  long simd_time;

        gettimeofday(&tv_begin,NULL);
        func_neon(m);
        gettimeofday(&tv_end,NULL);
        simd_time=1000000 * (tv_end.tv_sec-tv_begin.tv_sec)+ tv_end.tv_usec-tv_begin.tv_usec;
        cout<<"simd_time:"<<simd_time<<endl;

}
